#!/bin/bash

# This script acts as the start of exaslct the script language container build tool
# It tries to discover if pipenv is already installed or tries to install it if it not exists.
# After that it creates the virtual environment and install all necessary dependencies for exaslct.
# In the end it runs exaslct_src/exaslct.py in the virtual environment.

COMMAND_LINE_ARGS=$*
SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

run () {
    PIPENV_BIN="$1"
    cd "$SCRIPT_DIR"
    if $PIPENV_BIN --venv &> /dev/null
    then
        echo "Using existing virtual environment"
    else
        echo "Creating new virtual environment and installing dependencies"
        $PIPENV_BIN install
    fi
    if [ ! -f Pipfile.lock ]
    then
        echo "Installing dependencies"
        $PIPENV_BIN install
    fi
    export PYTHONPATH="."
    $PIPENV_BIN run python3 exaslct_src/exaslct.py $COMMAND_LINE_ARGS
}


find_pipenv_via_pip () {
    local PIPENV_LOCATION=$($PIP_BIN show pipenv | grep 'Location:'  | cut -f 2 -d " ")
    local PIPENV_BIN_IN_LOCATION=$($PIP_BIN show -f pipenv | grep 'bin/pipenv$' | awk '{$1=$1};1')
    PIPENV_BIN=$(command -v "$PIPENV_LOCATION/$PIPENV_BIN_IN_LOCATION")
}

request_install_via_pip_to_virtual_env () {
    echo "Do you want to install pipenv into the current virtual environment: yes/no"
    read ANSWER
    if [ "$ANSWER" == "yes" ];
    then
        $PIP_BIN install pipenv
    else
        echo "Aborting"
    fi
}

request_install_via_pip_to_user () {
    echo "Do you want to install pipenv local to the user: yes/no"
    read ANSWER
    if [ "$ANSWER" == "yes" ];
    then
        $PIP_BIN install --user pipenv
    else
        echo "Aborting"
    fi
}

request_install_via_pip () {
    IS_IN_VIRTUAL_ENV=$($PYTHON3_BIN -c "import sys; print(hasattr(sys, 'real_prefix'))")
    if [ "$IS_IN_VIRTUAL_ENV" == "True" ];
    then
        request_install_via_pip_to_virtual_env
    else
        request_install_via_pip_to_user
    fi
}

discover_python36plus() {
    if [ -z "$PYTHON3_BIN" ]
    then
        PYTHON_BINARIES=$(whereis -b python | xargs -n 1 echo | grep bin)
        PYTHON3_BIN=""
        for PYTHON_BIN in $PYTHON_BINARIES
        do
            PYTHON_BIN_VERSION=$($PYTHON_BIN --version 2>&1 )
            if echo "$PYTHON_BIN" | grep "3.[6|7|8|9]" &> /dev/null
            then
                PYTHON3_BIN="$PYTHON_BIN"
                break
            fi
        done
        if [ -z "$PYTHON3_BIN" ]
        then
            echo "ERROR: Did not find a python 3.6+ executable, please specifiy the environment variable PYTHON3_BIN"
            exit 1
        fi
    fi
    echo "Using following python executable: $PYTHON3_BIN"
}

discover_pip () {
    if [ -z "$PIP_BIN" ];
    then
        discover_python36plus
        if $PYTHON3_BIN -m pip list &> /dev/null
        then
            PIP_BIN="$PYTHON3_BIN -m pip "
            echo "Using following pip executable: $PIP_BIN"
        else
            echo "ERROR: Can't find your pip executable, please install pip for your python binary $PYTHON3_BIN, or specify the path to your pip executable in the environment variable PIP_ENV."
            exit 1
        fi
    fi
}

discover_pipenv() {
    if [ -z "$PIPENV_BIN" ]
    then
        PIPENV_BIN=$(whereis -b pipenv | xargs -n 1 echo | grep bin)
        if [ -z "$PIPENV_BIN" ]
        then
            discover_pip
            find_pipenv_via_pip
        fi
    fi
}


discover_pipenv
if [ -z "$PIPENV_BIN" ]
then
    echo "Warning: Can't find your pipenv executable, I try to install it via pip. Otherwise, you can specifiy it via the environment variable $PIPENV_BIN."
    request_install_via_pip
fi
discover_pipenv
echo "Using following pipenv executable: $PIPENV_BIN"
run "$PIPENV_BIN"